<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace NxSys\Library\Clients\Brex\API\Webhooks\Normalizer;

use NxSys\Library\Clients\Brex\API\Webhooks\Runtime\Normalizer\CheckArray;
use NxSys\Library\Clients\Brex\API\Webhooks\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class JaneObjectNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;
    protected $normalizers = ['NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\CreateWebhookSubscriptionRequest' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\CreateWebhookSubscriptionRequestNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\ExpensePaymentStatusUpdatedEvent' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\ExpensePaymentStatusUpdatedEventNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\ExpensePaymentStatusUpdatedEventAmount' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\ExpensePaymentStatusUpdatedEventAmountNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\Money' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\MoneyNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\PageWebhookSubscription' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\PageWebhookSubscriptionNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\ProductApplication' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\ProductApplicationNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\ReferralActivatedEvent' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\ReferralActivatedEventNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\ReferralApplicationStatusChangedEvent' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\ReferralApplicationStatusChangedEventNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\ReferralCreatedEvent' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\ReferralCreatedEventNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\TransferEvent' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\TransferEventNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\TransferFailedEvent' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\TransferFailedEventNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\TransferProcessedEvent' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\TransferProcessedEventNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\UpdateWebhookSubscriptionRequest' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\UpdateWebhookSubscriptionRequestNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\UserUpdatedEvent' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\UserUpdatedEventNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\WebhookSecret' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\WebhookSecretNormalizer', 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Model\\WebhookSubscription' => 'NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Normalizer\\WebhookSubscriptionNormalizer', '\\Jane\\Component\\JsonSchemaRuntime\\Reference' => '\\NxSys\\Library\\Clients\\Brex\\API\\Webhooks\\Runtime\\Normalizer\\ReferenceNormalizer'];
    protected $normalizersCache = [];

    public function supportsDenormalization($data, $type, $format = null): bool
    {
        return array_key_exists($type, $this->normalizers);
    }

    public function supportsNormalization($data, $format = null): bool
    {
        return is_object($data) && array_key_exists(get_class($data), $this->normalizers);
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $normalizerClass = $this->normalizers[get_class($object)];
        $normalizer = $this->getNormalizer($normalizerClass);

        return $normalizer->normalize($object, $format, $context);
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        $denormalizerClass = $this->normalizers[$class];
        $denormalizer = $this->getNormalizer($denormalizerClass);

        return $denormalizer->denormalize($data, $class, $format, $context);
    }

    private function getNormalizer(string $normalizerClass)
    {
        return $this->normalizersCache[$normalizerClass] ?? $this->initNormalizer($normalizerClass);
    }

    private function initNormalizer(string $normalizerClass)
    {
        $normalizer = new $normalizerClass();
        $normalizer->setNormalizer($this->normalizer);
        $normalizer->setDenormalizer($this->denormalizer);
        $this->normalizersCache[$normalizerClass] = $normalizer;

        return $normalizer;
    }
}
