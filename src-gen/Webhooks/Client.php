<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace NxSys\Library\Clients\Brex\API\Webhooks;

class Client extends Runtime\Client\Client
{
    /**
     * List the webhooks you have registered.
     *
     * @param array $queryParameters {
     *
     * @var string $cursor
     * @var int    $limit
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PageWebhookSubscription|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ListSubscriptionBadRequestException
     * @throws Exception\ListSubscriptionUnauthorizedException
     * @throws Exception\ListSubscriptionForbiddenException
     * @throws Exception\ListSubscriptionInternalServerErrorException
     */
    public function listSubscription(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListSubscription($queryParameters), $fetch);
    }

    /**
     * Register an endpoint to start receiving selected webhook events.
     *
     * @param array $headerParameters {
     *
     * @var string $Idempotency-Key
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\WebhookSubscription|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CreateSubscriptionBadRequestException
     * @throws Exception\CreateSubscriptionUnauthorizedException
     * @throws Exception\CreateSubscriptionForbiddenException
     * @throws Exception\CreateSubscriptionInternalServerErrorException
     */
    public function createSubscription(Model\CreateWebhookSubscriptionRequest $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateSubscription($requestBody, $headerParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \NxSys\Library\Clients\Brex\API\Webhooks\Model\WebhookSecret[]|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ListSecretsBadRequestException
     * @throws Exception\ListSecretsUnauthorizedException
     * @throws Exception\ListSecretsForbiddenException
     * @throws Exception\ListSecretsInternalServerErrorException
     */
    public function listSecrets(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListSecrets(), $fetch);
    }

    /**
     * Unregister a webhook if you want to stop receiving webhook events.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteSubscriptionBadRequestException
     * @throws Exception\DeleteSubscriptionUnauthorizedException
     * @throws Exception\DeleteSubscriptionForbiddenException
     * @throws Exception\DeleteSubscriptionInternalServerErrorException
     */
    public function deleteSubscription(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteSubscription($id), $fetch);
    }

    /**
     * Get details of a webhook.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\WebhookSubscription|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetSubscriptionByIdBadRequestException
     * @throws Exception\GetSubscriptionByIdUnauthorizedException
     * @throws Exception\GetSubscriptionByIdForbiddenException
     * @throws Exception\GetSubscriptionByIdInternalServerErrorException
     */
    public function getSubscriptionById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetSubscriptionById($id), $fetch);
    }

    /**
     * Update a webhook.
     * You can update the endpoint url, event types that the endpoint receives, or temporarily deactivate the webhook.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\WebhookSubscription|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UpdateSubscriptionBadRequestException
     * @throws Exception\UpdateSubscriptionUnauthorizedException
     * @throws Exception\UpdateSubscriptionForbiddenException
     * @throws Exception\UpdateSubscriptionInternalServerErrorException
     */
    public function updateSubscription(string $id, Model\UpdateWebhookSubscriptionRequest $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UpdateSubscription($id, $requestBody), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUriFactory()->createUri('https://platform.brexapis.com');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
