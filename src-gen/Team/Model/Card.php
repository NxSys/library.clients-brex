<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace NxSys\Library\Clients\Brex\API\Team\Model;

class Card extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var string
     */
    protected $id;
    /**
     * @var mixed[]
     */
    protected $owner;
    /**
     * @var string
     */
    protected $status;
    /**
     * @var string
     */
    protected $lastFour;
    /**
     * @var string
     */
    protected $cardName;
    /**
     * @var string
     */
    protected $cardType;
    /**
    `limit_type = CARD` for vendor cards. Vendor cards must have a `card_type` of `VIRTUAL`
    and do not rely on the user specific limit.

    For corporate cards, `limit_type = USER`.

    Learn more about different card types [here](https://support.brex.com/what-are-the-different-types-of-cards-i-can-get/).

     *
     * @var string
     */
    protected $limitType;
    /**
     * @var CardSpendControls
     */
    protected $spendControls;
    /**
     * Company business address (must be in the US; no PO box or virtual/forwarding addresses allowed).
     *
     * @var Address
     */
    protected $billingAddress;
    /**
     * @var CardMailingAddress
     */
    protected $mailingAddress;
    /**
    Set of key value pairs associated with this object. Please do not store any personally identifiable or sensitive information here.
    Limitations: maximum of 50 keys, keys cannot exceed 40 characters, values cannot exceed 500 characters.

     *
     * @var string[]|null
     */
    protected $metadata;

    public function getId(): string
    {
        return $this->id;
    }

    public function setId(string $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * @return mixed[]
     */
    public function getOwner(): iterable
    {
        return $this->owner;
    }

    /**
     * @param mixed[] $owner
     */
    public function setOwner(iterable $owner): self
    {
        $this->initialized['owner'] = true;
        $this->owner = $owner;

        return $this;
    }

    public function getStatus(): string
    {
        return $this->status;
    }

    public function setStatus(string $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;

        return $this;
    }

    public function getLastFour(): string
    {
        return $this->lastFour;
    }

    public function setLastFour(string $lastFour): self
    {
        $this->initialized['lastFour'] = true;
        $this->lastFour = $lastFour;

        return $this;
    }

    public function getCardName(): string
    {
        return $this->cardName;
    }

    public function setCardName(string $cardName): self
    {
        $this->initialized['cardName'] = true;
        $this->cardName = $cardName;

        return $this;
    }

    public function getCardType(): string
    {
        return $this->cardType;
    }

    public function setCardType(string $cardType): self
    {
        $this->initialized['cardType'] = true;
        $this->cardType = $cardType;

        return $this;
    }

    /**
    `limit_type = CARD` for vendor cards. Vendor cards must have a `card_type` of `VIRTUAL`
    and do not rely on the user specific limit.

    For corporate cards, `limit_type = USER`.

    Learn more about different card types [here](https://support.brex.com/what-are-the-different-types-of-cards-i-can-get/).
     */
    public function getLimitType(): string
    {
        return $this->limitType;
    }

    /**
    `limit_type = CARD` for vendor cards. Vendor cards must have a `card_type` of `VIRTUAL`
    and do not rely on the user specific limit.

    For corporate cards, `limit_type = USER`.

    Learn more about different card types [here](https://support.brex.com/what-are-the-different-types-of-cards-i-can-get/).
     */
    public function setLimitType(string $limitType): self
    {
        $this->initialized['limitType'] = true;
        $this->limitType = $limitType;

        return $this;
    }

    public function getSpendControls(): CardSpendControls
    {
        return $this->spendControls;
    }

    public function setSpendControls(CardSpendControls $spendControls): self
    {
        $this->initialized['spendControls'] = true;
        $this->spendControls = $spendControls;

        return $this;
    }

    /**
     * Company business address (must be in the US; no PO box or virtual/forwarding addresses allowed).
     */
    public function getBillingAddress(): Address
    {
        return $this->billingAddress;
    }

    /**
     * Company business address (must be in the US; no PO box or virtual/forwarding addresses allowed).
     */
    public function setBillingAddress(Address $billingAddress): self
    {
        $this->initialized['billingAddress'] = true;
        $this->billingAddress = $billingAddress;

        return $this;
    }

    public function getMailingAddress(): CardMailingAddress
    {
        return $this->mailingAddress;
    }

    public function setMailingAddress(CardMailingAddress $mailingAddress): self
    {
        $this->initialized['mailingAddress'] = true;
        $this->mailingAddress = $mailingAddress;

        return $this;
    }

    /**
    Set of key value pairs associated with this object. Please do not store any personally identifiable or sensitive information here.
    Limitations: maximum of 50 keys, keys cannot exceed 40 characters, values cannot exceed 500 characters.

     *
     * @return string[]|null
     */
    public function getMetadata(): ?iterable
    {
        return $this->metadata;
    }

    /**
    Set of key value pairs associated with this object. Please do not store any personally identifiable or sensitive information here.
    Limitations: maximum of 50 keys, keys cannot exceed 40 characters, values cannot exceed 500 characters.

     *
     * @param string[]|null $metadata
     */
    public function setMetadata(?iterable $metadata): self
    {
        $this->initialized['metadata'] = true;
        $this->metadata = $metadata;

        return $this;
    }
}
