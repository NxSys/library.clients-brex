<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace NxSys\Library\Clients\Brex\API\Team\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use NxSys\Library\Clients\Brex\API\Team\Runtime\Normalizer\CheckArray;
use NxSys\Library\Clients\Brex\API\Team\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class CreateUserRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \NxSys\Library\Clients\Brex\API\Team\Model\CreateUserRequest::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \NxSys\Library\Clients\Brex\API\Team\Model\CreateUserRequest::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \NxSys\Library\Clients\Brex\API\Team\Model\CreateUserRequest();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('first_name', $data)) {
                $object->setFirstName($data['first_name']);
                unset($data['first_name']);
            }
            if (\array_key_exists('last_name', $data)) {
                $object->setLastName($data['last_name']);
                unset($data['last_name']);
            }
            if (\array_key_exists('email', $data)) {
                $object->setEmail($data['email']);
                unset($data['email']);
            }
            if (\array_key_exists('manager_id', $data) && $data['manager_id'] !== null) {
                $object->setManagerId($data['manager_id']);
                unset($data['manager_id']);
            } elseif (\array_key_exists('manager_id', $data) && $data['manager_id'] === null) {
                $object->setManagerId(null);
            }
            if (\array_key_exists('department_id', $data) && $data['department_id'] !== null) {
                $object->setDepartmentId($data['department_id']);
                unset($data['department_id']);
            } elseif (\array_key_exists('department_id', $data) && $data['department_id'] === null) {
                $object->setDepartmentId(null);
            }
            if (\array_key_exists('location_id', $data) && $data['location_id'] !== null) {
                $object->setLocationId($data['location_id']);
                unset($data['location_id']);
            } elseif (\array_key_exists('location_id', $data) && $data['location_id'] === null) {
                $object->setLocationId(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['first_name'] = $object->getFirstName();
            $data['last_name'] = $object->getLastName();
            $data['email'] = $object->getEmail();
            if ($object->isInitialized('managerId') && null !== $object->getManagerId()) {
                $data['manager_id'] = $object->getManagerId();
            }
            if ($object->isInitialized('departmentId') && null !== $object->getDepartmentId()) {
                $data['department_id'] = $object->getDepartmentId();
            }
            if ($object->isInitialized('locationId') && null !== $object->getLocationId()) {
                $data['location_id'] = $object->getLocationId();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\NxSys\Library\Clients\Brex\API\Team\Model\CreateUserRequest::class => false];
        }
    }
} else {
    class CreateUserRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \NxSys\Library\Clients\Brex\API\Team\Model\CreateUserRequest::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \NxSys\Library\Clients\Brex\API\Team\Model\CreateUserRequest::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \NxSys\Library\Clients\Brex\API\Team\Model\CreateUserRequest();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('first_name', $data)) {
                $object->setFirstName($data['first_name']);
                unset($data['first_name']);
            }
            if (\array_key_exists('last_name', $data)) {
                $object->setLastName($data['last_name']);
                unset($data['last_name']);
            }
            if (\array_key_exists('email', $data)) {
                $object->setEmail($data['email']);
                unset($data['email']);
            }
            if (\array_key_exists('manager_id', $data) && $data['manager_id'] !== null) {
                $object->setManagerId($data['manager_id']);
                unset($data['manager_id']);
            } elseif (\array_key_exists('manager_id', $data) && $data['manager_id'] === null) {
                $object->setManagerId(null);
            }
            if (\array_key_exists('department_id', $data) && $data['department_id'] !== null) {
                $object->setDepartmentId($data['department_id']);
                unset($data['department_id']);
            } elseif (\array_key_exists('department_id', $data) && $data['department_id'] === null) {
                $object->setDepartmentId(null);
            }
            if (\array_key_exists('location_id', $data) && $data['location_id'] !== null) {
                $object->setLocationId($data['location_id']);
                unset($data['location_id']);
            } elseif (\array_key_exists('location_id', $data) && $data['location_id'] === null) {
                $object->setLocationId(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['first_name'] = $object->getFirstName();
            $data['last_name'] = $object->getLastName();
            $data['email'] = $object->getEmail();
            if ($object->isInitialized('managerId') && null !== $object->getManagerId()) {
                $data['manager_id'] = $object->getManagerId();
            }
            if ($object->isInitialized('departmentId') && null !== $object->getDepartmentId()) {
                $data['department_id'] = $object->getDepartmentId();
            }
            if ($object->isInitialized('locationId') && null !== $object->getLocationId()) {
                $data['location_id'] = $object->getLocationId();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\NxSys\Library\Clients\Brex\API\Team\Model\CreateUserRequest::class => false];
        }
    }
}
