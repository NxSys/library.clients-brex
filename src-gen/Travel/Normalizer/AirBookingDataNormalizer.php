<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace NxSys\Library\Clients\Brex\API\Travel\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use NxSys\Library\Clients\Brex\API\Travel\Runtime\Normalizer\CheckArray;
use NxSys\Library\Clients\Brex\API\Travel\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AirBookingDataNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization($data, $type, $format = null): bool
    {
        return $type === 'NxSys\\Library\\Clients\\Brex\\API\\Travel\\Model\\AirBookingData';
    }

    public function supportsNormalization($data, $format = null): bool
    {
        return is_object($data) && get_class($data) === 'NxSys\\Library\\Clients\\Brex\\API\\Travel\\Model\\AirBookingData';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \NxSys\Library\Clients\Brex\API\Travel\Model\AirBookingData();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('journeys', $data)) {
            $values = [];
            foreach ($data['journeys'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'NxSys\\Library\\Clients\\Brex\\API\\Travel\\Model\\AirBookingDataJourney', 'json', $context);
            }
            $object->setJourneys($values);
            unset($data['journeys']);
        }
        if (\array_key_exists('tickets', $data)) {
            $values_1 = [];
            foreach ($data['tickets'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'NxSys\\Library\\Clients\\Brex\\API\\Travel\\Model\\AirBookingDataFlightTicket', 'json', $context);
            }
            $object->setTickets($values_1);
            unset($data['tickets']);
        }
        if (\array_key_exists('redress_number', $data)) {
            $object->setRedressNumber($this->denormalizer->denormalize($data['redress_number'], 'NxSys\\Library\\Clients\\Brex\\API\\Travel\\Model\\AirBookingDataRedressNumber', 'json', $context));
            unset($data['redress_number']);
        }
        if (\array_key_exists('known_traveler_number', $data)) {
            $object->setKnownTravelerNumber($this->denormalizer->denormalize($data['known_traveler_number'], 'NxSys\\Library\\Clients\\Brex\\API\\Travel\\Model\\AirBookingDataKnownTravelerNumber', 'json', $context));
            unset($data['known_traveler_number']);
        }
        if (\array_key_exists('type', $data)) {
            $object->setType($data['type']);
            unset($data['type']);
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_2;
            }
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $values = [];
        foreach ($object->getJourneys() as $value) {
            $values[] = $this->normalizer->normalize($value, 'json', $context);
        }
        $data['journeys'] = $values;
        $values_1 = [];
        foreach ($object->getTickets() as $value_1) {
            $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
        }
        $data['tickets'] = $values_1;
        if ($object->isInitialized('redressNumber') && null !== $object->getRedressNumber()) {
            $data['redress_number'] = $this->normalizer->normalize($object->getRedressNumber(), 'json', $context);
        }
        if ($object->isInitialized('knownTravelerNumber') && null !== $object->getKnownTravelerNumber()) {
            $data['known_traveler_number'] = $this->normalizer->normalize($object->getKnownTravelerNumber(), 'json', $context);
        }
        if ($object->isInitialized('type') && null !== $object->getType()) {
            $data['type'] = $object->getType();
        }
        foreach ($object as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $data[$key] = $value_2;
            }
        }

        return $data;
    }
}
