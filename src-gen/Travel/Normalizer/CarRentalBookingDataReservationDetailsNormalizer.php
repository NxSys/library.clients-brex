<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace NxSys\Library\Clients\Brex\API\Travel\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use NxSys\Library\Clients\Brex\API\Travel\Runtime\Normalizer\CheckArray;
use NxSys\Library\Clients\Brex\API\Travel\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CarRentalBookingDataReservationDetailsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization($data, $type, $format = null): bool
    {
        return $type === 'NxSys\\Library\\Clients\\Brex\\API\\Travel\\Model\\CarRentalBookingDataReservationDetails';
    }

    public function supportsNormalization($data, $format = null): bool
    {
        return is_object($data) && get_class($data) === 'NxSys\\Library\\Clients\\Brex\\API\\Travel\\Model\\CarRentalBookingDataReservationDetails';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \NxSys\Library\Clients\Brex\API\Travel\Model\CarRentalBookingDataReservationDetails();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('confirmation_code', $data) && $data['confirmation_code'] !== null) {
            $object->setConfirmationCode($data['confirmation_code']);
            unset($data['confirmation_code']);
        } elseif (\array_key_exists('confirmation_code', $data) && $data['confirmation_code'] === null) {
            $object->setConfirmationCode(null);
        }
        if (\array_key_exists('pickup', $data)) {
            $object->setPickup($this->denormalizer->denormalize($data['pickup'], 'NxSys\\Library\\Clients\\Brex\\API\\Travel\\Model\\CarRentalBookingDataReservationDetailsPickup', 'json', $context));
            unset($data['pickup']);
        }
        if (\array_key_exists('drop_off', $data)) {
            $object->setDropOff($this->denormalizer->denormalize($data['drop_off'], 'NxSys\\Library\\Clients\\Brex\\API\\Travel\\Model\\CarRentalBookingDataReservationDetailsDropOff', 'json', $context));
            unset($data['drop_off']);
        }
        if (\array_key_exists('rental_company', $data) && $data['rental_company'] !== null) {
            $object->setRentalCompany($data['rental_company']);
            unset($data['rental_company']);
        } elseif (\array_key_exists('rental_company', $data) && $data['rental_company'] === null) {
            $object->setRentalCompany(null);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        if ($object->isInitialized('confirmationCode') && null !== $object->getConfirmationCode()) {
            $data['confirmation_code'] = $object->getConfirmationCode();
        }
        $data['pickup'] = $this->normalizer->normalize($object->getPickup(), 'json', $context);
        $data['drop_off'] = $this->normalizer->normalize($object->getDropOff(), 'json', $context);
        if ($object->isInitialized('rentalCompany') && null !== $object->getRentalCompany()) {
            $data['rental_company'] = $object->getRentalCompany();
        }
        foreach ($object as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $data[$key] = $value;
            }
        }

        return $data;
    }
}
