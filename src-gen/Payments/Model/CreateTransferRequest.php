<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace NxSys\Library\Clients\Brex\API\Payments\Model;

class CreateTransferRequest extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Counterparty Details for the transfer.
     *
     * @var mixed[]
     */
    protected $counterparty;
    /**
    Money fields can be signed or unsigned. Fields are signed (an unsigned value will be interpreted as positive). The amount of money will be represented in the smallest denomination
    of the currency indicated. For example, USD 7.00 will be represented in cents with an amount of 700.

     *
     * @var Money
     */
    protected $amount;
    /**
     * Description of the transfer for internal use. Not exposed externally.
     *
     * @var string
     */
    protected $description;
    /**
     * External memo for the transfer. `Payment Instructions` for Wires and the `Entry Description` for ACH payments.
     *
     * @var string
     */
    protected $externalMemo;
    /**
     * Originating account details for the transfer.
     *
     * @var mixed[]
     */
    protected $originatingAccount;
    /**
     * @var string
     */
    protected $approvalType;

    /**
     * Counterparty Details for the transfer.
     *
     * @return mixed[]
     */
    public function getCounterparty(): iterable
    {
        return $this->counterparty;
    }

    /**
     * Counterparty Details for the transfer.
     *
     * @param mixed[] $counterparty
     */
    public function setCounterparty(iterable $counterparty): self
    {
        $this->initialized['counterparty'] = true;
        $this->counterparty = $counterparty;

        return $this;
    }

    /**
    Money fields can be signed or unsigned. Fields are signed (an unsigned value will be interpreted as positive). The amount of money will be represented in the smallest denomination
    of the currency indicated. For example, USD 7.00 will be represented in cents with an amount of 700.
     */
    public function getAmount(): Money
    {
        return $this->amount;
    }

    /**
    Money fields can be signed or unsigned. Fields are signed (an unsigned value will be interpreted as positive). The amount of money will be represented in the smallest denomination
    of the currency indicated. For example, USD 7.00 will be represented in cents with an amount of 700.
     */
    public function setAmount(Money $amount): self
    {
        $this->initialized['amount'] = true;
        $this->amount = $amount;

        return $this;
    }

    /**
     * Description of the transfer for internal use. Not exposed externally.
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Description of the transfer for internal use. Not exposed externally.
     */
    public function setDescription(string $description): self
    {
        $this->initialized['description'] = true;
        $this->description = $description;

        return $this;
    }

    /**
     * External memo for the transfer. `Payment Instructions` for Wires and the `Entry Description` for ACH payments.
    and at most 40 characters for `CHEQUES`
     */
    public function getExternalMemo(): string
    {
        return $this->externalMemo;
    }

    /**
     * External memo for the transfer. `Payment Instructions` for Wires and the `Entry Description` for ACH payments.
    and at most 40 characters for `CHEQUES`
     */
    public function setExternalMemo(string $externalMemo): self
    {
        $this->initialized['externalMemo'] = true;
        $this->externalMemo = $externalMemo;

        return $this;
    }

    /**
     * Originating account details for the transfer.
     *
     * @return mixed[]
     */
    public function getOriginatingAccount(): iterable
    {
        return $this->originatingAccount;
    }

    /**
     * Originating account details for the transfer.
     *
     * @param mixed[] $originatingAccount
     */
    public function setOriginatingAccount(iterable $originatingAccount): self
    {
        $this->initialized['originatingAccount'] = true;
        $this->originatingAccount = $originatingAccount;

        return $this;
    }

    public function getApprovalType(): string
    {
        return $this->approvalType;
    }

    public function setApprovalType(string $approvalType): self
    {
        $this->initialized['approvalType'] = true;
        $this->approvalType = $approvalType;

        return $this;
    }
}
