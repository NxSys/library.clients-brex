<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace NxSys\Library\Clients\Brex\API\Payments\Model;

class Transfer extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Unique ID associated with the transfer.
     *
     * @var string
     */
    protected $id;
    /**
     * @var TransferCounterparty
     */
    protected $counterparty;
    /**
     * Description of the transfer.
     *
     * @var string|null
     */
    protected $description;
    /**
     * @var string
     */
    protected $paymentType;
    /**
    Money fields can be signed or unsigned. Fields are signed (an unsigned value will be interpreted as positive). The amount of money will be represented in the smallest denomination
    of the currency indicated. For example, USD 7.00 will be represented in cents with an amount of 700.

     *
     * @var Money
     */
    protected $amount;
    /**
     * Transaction processing date.
     *
     * @var \DateTime|null
     */
    protected $processDate;
    /**
     * Originating account details for the transfer.
     *
     * @var mixed[]
     */
    protected $originatingAccount;
    /**
     * `PROCESSING`: We have started to process the sending or receiving of this transaction.
     *
     * @var string
     */
    protected $status;
    /**
     * @var string
     */
    protected $cancellationReason;
    /**
     * Estimated delivery date for transfer.
     *
     * @var \DateTime|null
     */
    protected $estimatedDeliveryDate;
    /**
     * User ID of the transfer initiator.
     *
     * @var string|null
     */
    protected $creatorUserId;
    /**
     * Date of transfer creation.
     *
     * @var \DateTime|null
     */
    protected $createdAt;
    /**
     * Human readable name for the transaction.
     *
     * @var string|null
     */
    protected $displayName;
    /**
     * External memo for the transfer. `Payment Instructions` for Wires and the `Entry Description` for ACH payments.
     *
     * @var string|null
     */
    protected $externalMemo;

    /**
     * Unique ID associated with the transfer.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Unique ID associated with the transfer.
     */
    public function setId(string $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    public function getCounterparty(): TransferCounterparty
    {
        return $this->counterparty;
    }

    public function setCounterparty(TransferCounterparty $counterparty): self
    {
        $this->initialized['counterparty'] = true;
        $this->counterparty = $counterparty;

        return $this;
    }

    /**
     * Description of the transfer.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Description of the transfer.
     */
    public function setDescription(?string $description): self
    {
        $this->initialized['description'] = true;
        $this->description = $description;

        return $this;
    }

    public function getPaymentType(): string
    {
        return $this->paymentType;
    }

    public function setPaymentType(string $paymentType): self
    {
        $this->initialized['paymentType'] = true;
        $this->paymentType = $paymentType;

        return $this;
    }

    /**
    Money fields can be signed or unsigned. Fields are signed (an unsigned value will be interpreted as positive). The amount of money will be represented in the smallest denomination
    of the currency indicated. For example, USD 7.00 will be represented in cents with an amount of 700.
     */
    public function getAmount(): Money
    {
        return $this->amount;
    }

    /**
    Money fields can be signed or unsigned. Fields are signed (an unsigned value will be interpreted as positive). The amount of money will be represented in the smallest denomination
    of the currency indicated. For example, USD 7.00 will be represented in cents with an amount of 700.
     */
    public function setAmount(Money $amount): self
    {
        $this->initialized['amount'] = true;
        $this->amount = $amount;

        return $this;
    }

    /**
     * Transaction processing date.
     */
    public function getProcessDate(): ?\DateTime
    {
        return $this->processDate;
    }

    /**
     * Transaction processing date.
     */
    public function setProcessDate(?\DateTime $processDate): self
    {
        $this->initialized['processDate'] = true;
        $this->processDate = $processDate;

        return $this;
    }

    /**
     * Originating account details for the transfer.
     *
     * @return mixed[]
     */
    public function getOriginatingAccount(): iterable
    {
        return $this->originatingAccount;
    }

    /**
     * Originating account details for the transfer.
     *
     * @param mixed[] $originatingAccount
     */
    public function setOriginatingAccount(iterable $originatingAccount): self
    {
        $this->initialized['originatingAccount'] = true;
        $this->originatingAccount = $originatingAccount;

        return $this;
    }

    /**
     * `PROCESSING`: We have started to process the sending or receiving of this transaction.
    `PROCESSED`: The money movement has been fully completed, which could mean money sent has arrived.
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * `PROCESSING`: We have started to process the sending or receiving of this transaction.
    `PROCESSED`: The money movement has been fully completed, which could mean money sent has arrived.
     */
    public function setStatus(string $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;

        return $this;
    }

    public function getCancellationReason(): string
    {
        return $this->cancellationReason;
    }

    public function setCancellationReason(string $cancellationReason): self
    {
        $this->initialized['cancellationReason'] = true;
        $this->cancellationReason = $cancellationReason;

        return $this;
    }

    /**
     * Estimated delivery date for transfer.
     */
    public function getEstimatedDeliveryDate(): ?\DateTime
    {
        return $this->estimatedDeliveryDate;
    }

    /**
     * Estimated delivery date for transfer.
     */
    public function setEstimatedDeliveryDate(?\DateTime $estimatedDeliveryDate): self
    {
        $this->initialized['estimatedDeliveryDate'] = true;
        $this->estimatedDeliveryDate = $estimatedDeliveryDate;

        return $this;
    }

    /**
     * User ID of the transfer initiator.
     */
    public function getCreatorUserId(): ?string
    {
        return $this->creatorUserId;
    }

    /**
     * User ID of the transfer initiator.
     */
    public function setCreatorUserId(?string $creatorUserId): self
    {
        $this->initialized['creatorUserId'] = true;
        $this->creatorUserId = $creatorUserId;

        return $this;
    }

    /**
     * Date of transfer creation.
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->createdAt;
    }

    /**
     * Date of transfer creation.
     */
    public function setCreatedAt(?\DateTime $createdAt): self
    {
        $this->initialized['createdAt'] = true;
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Human readable name for the transaction.
     */
    public function getDisplayName(): ?string
    {
        return $this->displayName;
    }

    /**
     * Human readable name for the transaction.
     */
    public function setDisplayName(?string $displayName): self
    {
        $this->initialized['displayName'] = true;
        $this->displayName = $displayName;

        return $this;
    }

    /**
     * External memo for the transfer. `Payment Instructions` for Wires and the `Entry Description` for ACH payments.
    and at most 40 characters for `CHEQUES`
     */
    public function getExternalMemo(): ?string
    {
        return $this->externalMemo;
    }

    /**
     * External memo for the transfer. `Payment Instructions` for Wires and the `Entry Description` for ACH payments.
    and at most 40 characters for `CHEQUES`
     */
    public function setExternalMemo(?string $externalMemo): self
    {
        $this->initialized['externalMemo'] = true;
        $this->externalMemo = $externalMemo;

        return $this;
    }
}
