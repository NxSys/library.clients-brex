<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace NxSys\Library\Clients\Brex\API\Expenses;

class Client extends Runtime\Client\Client
{
    /**
     * List expenses under the same account. Admin and bookkeeper have access to any expense, and regular users can only access their own.
     *
     * @param array $queryParameters {
     *
     * @var array  $expand[]
     * @var array  $user_id[]
     * @var array  $parent_expense_id[]
     * @var string $cursor
     * @var int    $limit
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PageExpandableExpense|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ListExpensesBadRequestException
     * @throws Exception\ListExpensesUnauthorizedException
     * @throws Exception\ListExpensesForbiddenException
     */
    public function listExpenses(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListExpenses($queryParameters), $fetch);
    }

    /**
     * The `uri` will be a pre-signed S3 URL allowing you to upload the receipt securely. This URL can only be used for a `PUT` operation and expires 30 minutes after its creation. Once your upload is complete, we will try to match the receipt with existing expenses.
     *
     * Refer to these [docs](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html) on how to upload to this pre-signed S3 URL. We highly recommend using one of AWS SDKs if they're available for your language to upload these files.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\CreateAsyncFileUploadResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ReceiptMatchBadRequestException
     * @throws Exception\ReceiptMatchUnauthorizedException
     */
    public function receiptMatch(Model\ReceiptMatchRequest $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ReceiptMatch($requestBody), $fetch);
    }

    /**
     * Get an expense by its ID.
     *
     * @param array $queryParameters {
     *
     * @var array $expand[]
     *            }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ExpandableExpense|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetExpenseBadRequestException
     * @throws Exception\GetExpenseUnauthorizedException
     * @throws Exception\GetExpenseForbiddenException
     * @throws Exception\GetExpenseNotFoundException
     */
    public function getExpense(string $expenseId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetExpense($expenseId, $queryParameters), $fetch);
    }

    /**
     * Update an expense. Admin and bookkeeper have access to any expense, and regular users can only access their own.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Expense|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UpdateExpenseBadRequestException
     * @throws Exception\UpdateExpenseUnauthorizedException
     * @throws Exception\UpdateExpenseForbiddenException
     * @throws Exception\UpdateExpenseNotFoundException
     */
    public function updateExpense(string $expenseId, Model\UpdateExpenseRequest $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UpdateExpense($expenseId, $requestBody), $fetch);
    }

    /**
     * The `uri` will be a pre-signed S3 URL allowing you to upload the receipt securely. This URL can only be used for a `PUT` operation and expires 30 minutes after its creation. Once your upload is complete, we will try to match the receipt with existing expenses.
     *
     * Refer to these [docs](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html) on how to upload to this pre-signed S3 URL. We highly recommend using one of AWS SDKs if they're available for your language to upload these files.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\CreateAsyncFileUploadResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ReceiptUploadBadRequestException
     * @throws Exception\ReceiptUploadUnauthorizedException
     * @throws Exception\ReceiptUploadForbiddenException
     * @throws Exception\ReceiptUploadNotFoundException
     */
    public function receiptUpload(string $expenseId, Model\ReceiptUploadRequest $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ReceiptUpload($expenseId, $requestBody), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUriFactory()->createUri('https://platform.brexapis.com');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
