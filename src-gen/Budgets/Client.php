<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace NxSys\Library\Clients\Brex\API\Budgets;

class Client extends Runtime\Client\Client
{
    /**
     * Lists Budgets belonging to this account.
     *
     * @param array $queryParameters {
     *
     * @var string $cursor
     * @var int    $limit
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PageBudget|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ListBudgetsBadRequestException
     * @throws Exception\ListBudgetsUnauthorizedException
     * @throws Exception\ListBudgetsForbiddenException
     */
    public function listBudgets(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListBudgets($queryParameters), $fetch);
    }

    /**
     * Creates a Budget.
     *
     * @param array $headerParameters {
     *
     * @var string $Idempotency-Key
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Budget|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CreateBudgetBadRequestException
     * @throws Exception\CreateBudgetUnauthorizedException
     * @throws Exception\CreateBudgetForbiddenException
     */
    public function createBudget(Model\CreateBudgetRequest $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateBudget($requestBody, $headerParameters), $fetch);
    }

    /**
     * Retrieves a Budget by ID.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Budget|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetBudgetByIdBadRequestException
     * @throws Exception\GetBudgetByIdUnauthorizedException
     * @throws Exception\GetBudgetByIdForbiddenException
     * @throws Exception\GetBudgetByIdNotFoundException
     */
    public function getBudgetById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetBudgetById($id), $fetch);
    }

    /**
     * Updates a Budget.
     *
     * @param array $headerParameters {
     *
     * @var string $Idempotency-Key
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Budget|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UpdateBudgetBadRequestException
     * @throws Exception\UpdateBudgetUnauthorizedException
     * @throws Exception\UpdateBudgetForbiddenException
     * @throws Exception\UpdateBudgetNotFoundException
     */
    public function updateBudget(string $id, Model\UpdateBudgetRequest $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UpdateBudget($id, $requestBody, $headerParameters), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUriFactory()->createUri('https://platform.brexapis.com');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
