<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace NxSys\Library\Clients\Brex\API\Budgets\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use NxSys\Library\Clients\Brex\API\Budgets\Runtime\Normalizer\CheckArray;
use NxSys\Library\Clients\Brex\API\Budgets\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class UpdateBudgetRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization($data, $type, $format = null): bool
    {
        return $type === 'NxSys\\Library\\Clients\\Brex\\API\\Budgets\\Model\\UpdateBudgetRequest';
    }

    public function supportsNormalization($data, $format = null): bool
    {
        return is_object($data) && get_class($data) === 'NxSys\\Library\\Clients\\Brex\\API\\Budgets\\Model\\UpdateBudgetRequest';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \NxSys\Library\Clients\Brex\API\Budgets\Model\UpdateBudgetRequest();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
            unset($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('description', $data) && $data['description'] !== null) {
            $object->setDescription($data['description']);
            unset($data['description']);
        } elseif (\array_key_exists('description', $data) && $data['description'] === null) {
            $object->setDescription(null);
        }
        if (\array_key_exists('owner_user_ids', $data) && $data['owner_user_ids'] !== null) {
            $values = [];
            foreach ($data['owner_user_ids'] as $value) {
                $values[] = $value;
            }
            $object->setOwnerUserIds($values);
            unset($data['owner_user_ids']);
        } elseif (\array_key_exists('owner_user_ids', $data) && $data['owner_user_ids'] === null) {
            $object->setOwnerUserIds(null);
        }
        if (\array_key_exists('member_user_ids', $data) && $data['member_user_ids'] !== null) {
            $values_1 = [];
            foreach ($data['member_user_ids'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setMemberUserIds($values_1);
            unset($data['member_user_ids']);
        } elseif (\array_key_exists('member_user_ids', $data) && $data['member_user_ids'] === null) {
            $object->setMemberUserIds(null);
        }
        if (\array_key_exists('limit', $data)) {
            $object->setLimit($this->denormalizer->denormalize($data['limit'], 'NxSys\\Library\\Clients\\Brex\\API\\Budgets\\Model\\UpdateBudgetRequestLimit', 'json', $context));
            unset($data['limit']);
        }
        if (\array_key_exists('limit_type', $data)) {
            $object->setLimitType($data['limit_type']);
            unset($data['limit_type']);
        }
        if (\array_key_exists('spend_type', $data)) {
            $object->setSpendType($data['spend_type']);
            unset($data['spend_type']);
        }
        if (\array_key_exists('start_date', $data) && $data['start_date'] !== null) {
            $object->setStartDate(\DateTime::createFromFormat('Y-m-d', $data['start_date'])->setTime(0, 0, 0));
            unset($data['start_date']);
        } elseif (\array_key_exists('start_date', $data) && $data['start_date'] === null) {
            $object->setStartDate(null);
        }
        if (\array_key_exists('end_date', $data) && $data['end_date'] !== null) {
            $object->setEndDate(\DateTime::createFromFormat('Y-m-d', $data['end_date'])->setTime(0, 0, 0));
            unset($data['end_date']);
        } elseif (\array_key_exists('end_date', $data) && $data['end_date'] === null) {
            $object->setEndDate(null);
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_2;
            }
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        if ($object->isInitialized('name') && null !== $object->getName()) {
            $data['name'] = $object->getName();
        }
        if ($object->isInitialized('description') && null !== $object->getDescription()) {
            $data['description'] = $object->getDescription();
        }
        if ($object->isInitialized('ownerUserIds') && null !== $object->getOwnerUserIds()) {
            $values = [];
            foreach ($object->getOwnerUserIds() as $value) {
                $values[] = $value;
            }
            $data['owner_user_ids'] = $values;
        }
        if ($object->isInitialized('memberUserIds') && null !== $object->getMemberUserIds()) {
            $values_1 = [];
            foreach ($object->getMemberUserIds() as $value_1) {
                $values_1[] = $value_1;
            }
            $data['member_user_ids'] = $values_1;
        }
        if ($object->isInitialized('limit') && null !== $object->getLimit()) {
            $data['limit'] = $this->normalizer->normalize($object->getLimit(), 'json', $context);
        }
        if ($object->isInitialized('limitType') && null !== $object->getLimitType()) {
            $data['limit_type'] = $object->getLimitType();
        }
        if ($object->isInitialized('spendType') && null !== $object->getSpendType()) {
            $data['spend_type'] = $object->getSpendType();
        }
        if ($object->isInitialized('startDate') && null !== $object->getStartDate()) {
            $data['start_date'] = $object->getStartDate()->format('Y-m-d');
        }
        if ($object->isInitialized('endDate') && null !== $object->getEndDate()) {
            $data['end_date'] = $object->getEndDate()->format('Y-m-d');
        }
        foreach ($object as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $data[$key] = $value_2;
            }
        }

        return $data;
    }
}
