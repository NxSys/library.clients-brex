<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace NxSys\Library\Clients\Brex\API\Transactions;

class Client extends Runtime\Client\Client
{
    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \NxSys\Library\Clients\Brex\API\Transactions\Model\CardAccount[]|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ListCardAccountsBadRequestException
     * @throws Exception\ListCardAccountsUnauthorizedException
     * @throws Exception\ListCardAccountsForbiddenException
     */
    public function listCardAccounts(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListCardAccounts(), $fetch);
    }

    /**
     * This endpoint lists all finalized statements for the primary card account.
     *
     * @param array $queryParameters {
     *
     * @var string $cursor
     * @var int    $limit
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PageStatement|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ListPrimaryCardStatementsBadRequestException
     * @throws Exception\ListPrimaryCardStatementsUnauthorizedException
     * @throws Exception\ListPrimaryCardStatementsForbiddenException
     */
    public function listPrimaryCardStatements(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListPrimaryCardStatements($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PageCashAccount|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ListAccountsBadRequestException
     * @throws Exception\ListAccountsUnauthorizedException
     * @throws Exception\ListAccountsForbiddenException
     */
    public function listAccounts(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListAccounts(), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\CashAccount|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetPrimaryAccountBadRequestException
     * @throws Exception\GetPrimaryAccountUnauthorizedException
     * @throws Exception\GetPrimaryAccountForbiddenException
     */
    public function getPrimaryAccount(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetPrimaryAccount(), $fetch);
    }

    /**
     * This endpoint returns the cash account associated with the provided ID with its status.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\CashAccount|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetAccountBadRequestException
     * @throws Exception\GetAccountUnauthorizedException
     * @throws Exception\GetAccountForbiddenException
     */
    public function getAccount(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetAccount($id), $fetch);
    }

    /**
     * This endpoint lists all finalized statements for the cash account by ID.
     *
     * @param array $queryParameters {
     *
     * @var string $cursor
     * @var int    $limit
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PageStatement|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ListCashStatementsBadRequestException
     * @throws Exception\ListCashStatementsUnauthorizedException
     * @throws Exception\ListCashStatementsForbiddenException
     */
    public function listCashStatements(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListCashStatements($id, $queryParameters), $fetch);
    }

    /**
     * This endpoint lists all settled transactions for the primary card account.
     * Regular users may only fetch their own "PURCHASE","REFUND" and "CHARGEBACK" settled transactions.
     *
     * @param array $queryParameters {
     *
     * @var string $cursor
     * @var int    $limit
     * @var array  $user_ids
     * @var string $posted_at_start
     *             Shows only transactions with a `posted_at_date` on or after this date-time. This parameter is the date-time notation as defined by [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)
     * @var array  $expand[]
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PageCardTransaction|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ListPrimaryCardTransactionsBadRequestException
     * @throws Exception\ListPrimaryCardTransactionsUnauthorizedException
     * @throws Exception\ListPrimaryCardTransactionsForbiddenException
     */
    public function listPrimaryCardTransactions(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListPrimaryCardTransactions($queryParameters), $fetch);
    }

    /**
     * This endpoint lists all transactions for the cash account with the selected ID.
     *
     * @param array $queryParameters {
     *
     * @var string $cursor
     * @var int    $limit
     * @var string $posted_at_start
     *             Shows only transactions with a `posted_at_date` on or after this date-time. This parameter is the date-time notation as defined by [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)
     *
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PageCashTransaction|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ListCashTransactionsBadRequestException
     * @throws Exception\ListCashTransactionsUnauthorizedException
     * @throws Exception\ListCashTransactionsForbiddenException
     */
    public function listCashTransactions(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListCashTransactions($id, $queryParameters), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUriFactory()->createUri('https://platform.brexapis.com');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
